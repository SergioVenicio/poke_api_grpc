// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: infra/grpc/proto/pokeapi.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PokeAPIClient is the client API for PokeAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PokeAPIClient interface {
	ListPokemons(ctx context.Context, in *ListPokemonRequest, opts ...grpc.CallOption) (*ListPokemonsResponse, error)
	GetPokemon(ctx context.Context, in *GetPokemonRequest, opts ...grpc.CallOption) (*GetPokemonResponse, error)
}

type pokeAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPokeAPIClient(cc grpc.ClientConnInterface) PokeAPIClient {
	return &pokeAPIClient{cc}
}

func (c *pokeAPIClient) ListPokemons(ctx context.Context, in *ListPokemonRequest, opts ...grpc.CallOption) (*ListPokemonsResponse, error) {
	out := new(ListPokemonsResponse)
	err := c.cc.Invoke(ctx, "/poke_api.PokeAPI/ListPokemons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokeAPIClient) GetPokemon(ctx context.Context, in *GetPokemonRequest, opts ...grpc.CallOption) (*GetPokemonResponse, error) {
	out := new(GetPokemonResponse)
	err := c.cc.Invoke(ctx, "/poke_api.PokeAPI/GetPokemon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PokeAPIServer is the server API for PokeAPI service.
// All implementations must embed UnimplementedPokeAPIServer
// for forward compatibility
type PokeAPIServer interface {
	ListPokemons(context.Context, *ListPokemonRequest) (*ListPokemonsResponse, error)
	GetPokemon(context.Context, *GetPokemonRequest) (*GetPokemonResponse, error)
	mustEmbedUnimplementedPokeAPIServer()
}

// UnimplementedPokeAPIServer must be embedded to have forward compatible implementations.
type UnimplementedPokeAPIServer struct {
}

func (UnimplementedPokeAPIServer) ListPokemons(context.Context, *ListPokemonRequest) (*ListPokemonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPokemons not implemented")
}
func (UnimplementedPokeAPIServer) GetPokemon(context.Context, *GetPokemonRequest) (*GetPokemonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPokemon not implemented")
}
func (UnimplementedPokeAPIServer) mustEmbedUnimplementedPokeAPIServer() {}

// UnsafePokeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PokeAPIServer will
// result in compilation errors.
type UnsafePokeAPIServer interface {
	mustEmbedUnimplementedPokeAPIServer()
}

func RegisterPokeAPIServer(s grpc.ServiceRegistrar, srv PokeAPIServer) {
	s.RegisterService(&PokeAPI_ServiceDesc, srv)
}

func _PokeAPI_ListPokemons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPokemonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokeAPIServer).ListPokemons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poke_api.PokeAPI/ListPokemons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokeAPIServer).ListPokemons(ctx, req.(*ListPokemonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PokeAPI_GetPokemon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPokemonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokeAPIServer).GetPokemon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poke_api.PokeAPI/GetPokemon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokeAPIServer).GetPokemon(ctx, req.(*GetPokemonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PokeAPI_ServiceDesc is the grpc.ServiceDesc for PokeAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PokeAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "poke_api.PokeAPI",
	HandlerType: (*PokeAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPokemons",
			Handler:    _PokeAPI_ListPokemons_Handler,
		},
		{
			MethodName: "GetPokemon",
			Handler:    _PokeAPI_GetPokemon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/grpc/proto/pokeapi.proto",
}
